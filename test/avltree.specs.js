/** Copyright 2016 Jim Armstrong (www.algorithmist.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
// Specs for Typescript Math Toolkit AVL Tree
// test functions/classes
var BtreeNode_1 = require('../src/BtreeNode');
var BTreeUtils_1 = require('../src/BTreeUtils');
var BTreeLight_1 = require('../src/BTreeLight');
var AVLTree_1 = require('../src/AVLTree');
var AVLTree_2 = require('../src/AVLTree');
var Chai = require('chai');
var expect = Chai.expect;
// Test Suites
describe('Binary Tree Node Tests: TSMT$BTreeNode<T>', function () {
    var utils = new BTreeUtils_1.TSMT$BTreeUtils();
    it('properly constructs a new binary tree node of type number', function () {
        var node = new BtreeNode_1.TSMT$BTreeNode();
        expect(node).to.not.equal(null);
        expect(node.parent).to.equal(null);
        expect(node.hasLeft).to.be.false;
        expect(node.hasRight).to.be.false;
    });
    it('properly constructs a new binary tree node with initial data', function () {
        var node = new BtreeNode_1.TSMT$BTreeNode(100.0);
        expect(node).to.not.equal(null);
        expect(node.parent).to.equal(null);
        expect(node.value).to.equal(100.0);
        expect(node.hasLeft).to.be.false;
        expect(node.hasRight).to.be.false;
    });
    it('properly accepts balance data', function () {
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        node.balance = -2.1;
        expect(node.balance).to.equal(-3);
        node.balance = 2.5;
        expect(node.balance).to.equal(2);
        node.balance = 0;
        expect(node.balance).to.equal(0);
    });
    it('properly accepts parent and child references', function () {
        var root = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var left = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var right = new BtreeNode_1.TSMT$BTreeNode(3.0);
        root.id = "root";
        left.id = "L";
        right.id = "R";
        left.parent = root;
        right.parent = root;
        root.left = left;
        root.right = right;
        expect(root.hasLeft).to.be.true;
        expect(root.hasRight).to.be.true;
        expect(left.parent.id == root.id).to.be.true;
        expect(right.parent.id == root.id).to.be.true;
        expect(root.left.id == left.id).to.be.true;
        expect(root.right.id == right.id).to.be.true;
    });
    it('properly compares two nodes', function () {
        var node1 = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var node2 = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var node3 = new BtreeNode_1.TSMT$BTreeNode(3.0);
        expect(node1.compare(node2)).to.equal(0);
        expect(node2.compare(node1)).to.equal(1);
        expect(node2.compare(node3)).to.equal(1);
    });
    it('properly computes node height #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var root = tree.root;
        expect(utils.nodeHeight(root)).to.equal(0);
        expect(root).to.be.null;
    });
    it('properly computes node height #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        two.left = one;
        two.right = four;
        four.left = three;
        four.right = five;
        expect(utils.nodeHeight(two)).to.equal(3);
        expect(utils.nodeHeight(one)).to.equal(1);
        expect(utils.nodeHeight(four)).to.equal(2);
    });
    it('properly computes node height #3', function () {
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        twenty.left = seventeen;
        twenty.right = twentyfour;
        seventeen.left = ten;
        seventeen.right = eighteen;
        ten.left = eight;
        expect(utils.nodeHeight(twenty)).to.equal(4);
        expect(utils.nodeHeight(seventeen)).to.equal(3);
        expect(utils.nodeHeight(ten)).to.equal(2);
        expect(utils.nodeHeight(twentyfour)).to.equal(1);
        expect(utils.nodeHeight(eighteen)).to.equal(1);
        expect(utils.nodeHeight(eight)).to.equal(1);
        expect(utils.nodeHeight(null)).to.equal(0);
    });
    it('properly computes node depth', function () {
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        twenty.left = seventeen;
        twenty.right = twentyfour;
        seventeen.left = ten;
        seventeen.right = eighteen;
        ten.left = eight;
        expect(utils.nodeDepth(twenty)).to.equal(1);
        expect(utils.nodeDepth(seventeen)).to.equal(2);
        expect(utils.nodeDepth(ten)).to.equal(3);
        expect(utils.nodeDepth(twentyfour)).to.equal(2);
        expect(utils.nodeDepth(eighteen)).to.equal(3);
        expect(utils.nodeDepth(eight)).to.equal(4);
        expect(utils.nodeDepth(null)).to.equal(0);
    });
});
describe('AVL Tree Basic Tests: TSMT$AVLTree<T> and TSMT$BTreeLight<T>', function () {
    it('properly constructs an AVL Tree', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        expect(tree != null).to.be.true;
        expect(tree.size).to.equal(0);
        expect(tree.root).to.be.null;
    });
    it('properly inserts a single node and assigns root', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var node = new BtreeNode_1.TSMT$BTreeNode(20.0);
        tree.insert(node);
        expect(tree.size).to.equal(1);
        var root = tree.root;
        expect(root === node).to.be.true;
    });
    it('properly inserts a single root node and single child', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var node = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var node1 = new BtreeNode_1.TSMT$BTreeNode(3.0);
        tree.insert(node);
        tree.insert(node1);
        expect(tree.size).to.equal(2);
    });
    it('properly inserts a single root node and two children #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        tree.insert(two);
        tree.insert(one);
        tree.insert(three);
        expect(tree.size).to.equal(3);
        var root = tree.root;
        expect(root == two).to.be.true;
        expect(root.hasLeft).to.be.true;
        expect(root.hasRight).to.be.true;
        expect(root.left === one).to.be.true;
        expect(root.right === three).to.be.true;
    });
    it('properly inserts a single root node and two children #2', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        tree.insert(one);
        tree.insert(two);
        tree.insert(three);
        expect(tree.size).to.equal(3);
        var root = tree.root;
        expect(root == one).to.be.true;
        expect(root.hasLeft).to.be.false;
        var child = root.right;
        expect(child.hasRight).to.be.true;
        expect(child.hasLeft).to.be.false;
        expect(child === two).to.be.true;
        child = child.right;
        expect(child.hasRight).to.be.false;
        expect(child.hasLeft).to.be.false;
        expect(child === three).to.be.true;
    });
    it('properly inserts a single root node and two children #3', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        expect(tree.size).to.equal(3);
        var root = tree.root;
        expect(root == three).to.be.true;
        expect(root.hasRight).to.be.false;
        var child = root.left;
        expect(child.hasLeft).to.be.true;
        expect(child.hasRight).to.be.false;
        expect(child === two).to.be.true;
        child = child.left;
        expect(child.hasLeft).to.be.false;
        expect(child.hasRight).to.be.false;
        expect(child === one).to.be.true;
    });
    it('properly inserts a single node and two children #4', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        five.id = "5";
        three.id = "3";
        four.id = "4";
        tree.insert(five);
        tree.insert(three);
        tree.insert(four);
        expect(tree.root.id).to.equal("5");
        expect(five.left.id).to.equal("3");
        expect(three.right.id).to.equal("4");
    });
    it('properly inserts multiple nodes', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        three.id = "3";
        four.id = "4";
        five.id = "5";
        two.id = "2";
        one.id = "1";
        tree.insert(three);
        tree.insert(four);
        tree.insert(five);
        tree.insert(two);
        tree.insert(one);
        expect(tree.size).to.equal(5);
        expect(tree.root.id).to.equal("3");
        expect(three.right.id).to.equal("4");
        expect(four.right.id).to.equal("5");
        expect(three.left.id).to.equal("2");
        expect(two.left.id).to.equal("1");
    });
    it('basic multi-node insert #2', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        three.id = "3";
        twenty.id = "20";
        seventeen.id = "17";
        four.id = "4";
        one.id = "1";
        tree.insert(three);
        tree.insert(twenty);
        tree.insert(seventeen);
        tree.insert(four);
        tree.insert(one);
        expect(tree.size).to.equal(5);
        expect(tree.root.id).to.equal(three.id);
        expect(three.right.id).to.equal(twenty.id);
        expect(twenty.left.id).to.equal(seventeen.id);
        expect(seventeen.left.id).to.equal(four.id);
        expect(three.left.id).to.equal(one.id);
    });
});
describe('Light Binary Tree Update Balance On Insert Tests', function () {
    it('one-node insert', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        node.id = "node";
        tree.insert(node);
        expect(node.balance).to.equal(0);
    });
    it('two-node insert #1', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        tree.insert(one);
        tree.insert(two);
        expect(one.balance).to.equal(1);
        expect(two.balance).to.equal(0);
    });
    it('two-node insert #2', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        two.id = "2";
        one.id = "1";
        tree.insert(two);
        tree.insert(one);
        expect(two.balance).to.equal(-1);
        expect(one.balance).to.equal(0);
    });
    it('three-node insert #1', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        two.id = "2";
        one.id = "1";
        three.id = "3";
        tree.insert(two);
        tree.insert(one);
        tree.insert(three);
        expect(two.balance).to.equal(0);
        expect(one.balance).to.equal(0);
        expect(three.balance).to.equal(0);
    });
    it('three-node insert #2', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var node1 = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var node2 = new BtreeNode_1.TSMT$BTreeNode(3.0);
        node.id = "one";
        node1.id = "two";
        node2.id = "three";
        tree.insert(node);
        tree.insert(node1);
        tree.insert(node2);
        expect(node.balance).to.equal(2);
        expect(node1.balance).to.equal(1);
        expect(node2.balance).to.equal(0);
    });
    it('three-node insert #3', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        three.id = "3";
        two.id = "2";
        one.id = "1";
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        expect(three.balance).to.equal(-2);
        expect(two.balance).to.equal(-1);
        expect(one.balance).to.equal(0);
    });
    it('mult-node test #1', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var twelve = new BtreeNode_1.TSMT$BTreeNode(12.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        var fifteen = new BtreeNode_1.TSMT$BTreeNode(15.0);
        twelve.id = "12";
        eight.id = "8";
        five.id = "5";
        nine.id = "9";
        fifteen.id = "15";
        tree.insert(twelve);
        expect(twelve.balance).to.equal(0);
        tree.insert(eight);
        expect(twelve.balance).to.equal(-1);
        tree.insert(five);
        expect(eight.balance).to.equal(-1);
        expect(twelve.balance).to.equal(-2);
        tree.insert(nine);
        expect(eight.balance).to.equal(0);
        expect(twelve.balance).to.equal(-2);
        tree.insert(fifteen);
        expect(fifteen.balance).to.equal(0);
        expect(twelve.balance).to.equal(-1);
    });
    it('mult-node test #2', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var twelve = new BtreeNode_1.TSMT$BTreeNode(12.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        twelve.id = "12";
        eight.id = "8";
        five.id = "5";
        nine.id = "9";
        ten.id = "10";
        tree.insert(twelve);
        expect(twelve.balance).to.equal(0);
        tree.insert(eight);
        expect(twelve.balance).to.equal(-1);
        tree.insert(five);
        expect(eight.balance).to.equal(-1);
        expect(twelve.balance).to.equal(-2);
        tree.insert(nine);
        expect(eight.balance).to.equal(0);
        expect(twelve.balance).to.equal(-2);
        tree.insert(ten);
        expect(ten.balance).to.equal(0);
        expect(nine.balance).to.equal(1);
        expect(eight.balance).to.equal(1);
        expect(twelve.balance).to.equal(-3);
    });
    it('mult-node test #3', function () {
        var tree = new BTreeLight_1.TSMT$BTreeLight();
        var twelve = new BtreeNode_1.TSMT$BTreeNode(12.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        tree.insert(twelve);
        tree.insert(eight);
        tree.insert(five);
        tree.insert(nine);
        tree.insert(twenty);
        tree.insert(eighteen);
        tree.insert(seventeen);
        expect(seventeen.balance).to.equal(0);
        expect(eighteen.balance).to.equal(-1);
        expect(twenty.balance).to.equal(-2);
        expect(twelve.balance).to.equal(1);
    });
});
describe('AVL Tree Rotation Tests', function () {
    it('properly performs a single left rotation', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        one.right = two;
        two.right = three;
        var newRoot = tree.singleRotation(one, AVLTree_2.TSMT$NODE_DIRECTION.LEFT);
        expect(newRoot.id).to.equal(two.id);
        expect(newRoot.hasLeft).to.be.true;
        expect(newRoot.hasRight).to.be.true;
        expect(newRoot.left.id).to.equal(one.id);
        expect(newRoot.right.id).to.equal(three.id);
        expect(one.parent.id).to.equal(two.id);
        expect(newRoot.balance).to.equal(0);
        expect(one.balance).to.equal(0);
        expect(three.balance).to.equal(0);
    });
    it('properly performs a single right rotation', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        three.id = "3";
        two.id = "2";
        one.id = "1";
        three.left = two;
        two.left = one;
        var newRoot = tree.singleRotation(three, AVLTree_2.TSMT$NODE_DIRECTION.RIGHT);
        expect(newRoot.id).to.equal(two.id);
        expect(newRoot.hasLeft).to.be.true;
        expect(newRoot.hasRight).to.be.true;
        expect(newRoot.left.id).to.equal(one.id);
        expect(newRoot.right.id).to.equal(three.id);
        expect(newRoot.balance).to.equal(0);
        expect(one.balance).to.equal(0);
        expect(three.balance).to.equal(0);
    });
    it('3-node double right rotation', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        five.id = "5";
        three.id = "3";
        four.id = "4";
        five.left = three;
        three.right = four;
        var newRoot = tree.doubleRotation(five, AVLTree_2.TSMT$NODE_DIRECTION.RIGHT);
        expect(newRoot.id).to.equal(four.id);
        expect(newRoot.hasLeft).to.be.true;
        expect(newRoot.hasRight).to.be.true;
        expect(newRoot.left.id).to.equal(three.id);
        expect(newRoot.right.id).to.equal(five.id);
        expect(newRoot.parent).to.be.null;
        expect(newRoot.left.parent.id).to.equal(newRoot.id);
        expect(newRoot.right.parent.id).to.equal(newRoot.id);
    });
    it('3-node double left rotation', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        three.id = "3";
        five.id = "5";
        four.id = "4";
        three.right = five;
        five.left = four;
        var newRoot = tree.doubleRotation(three, AVLTree_2.TSMT$NODE_DIRECTION.LEFT);
        expect(newRoot.id).to.equal(four.id);
        expect(newRoot.hasLeft).to.be.true;
        expect(newRoot.hasRight).to.be.true;
        expect(newRoot.left.id).to.equal(three.id);
        expect(newRoot.right.id).to.equal(five.id);
        expect(newRoot.parent).to.be.null;
        expect(newRoot.left.parent.id).to.equal(newRoot.id);
        expect(newRoot.right.parent.id).to.equal(newRoot.id);
    });
    it('multi-node, single-rotation #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        twenty.id = "20";
        seventeen.id = "17";
        twentyfour.id = "24";
        eighteen.id = "18";
        ten.id = "10";
        eight.id = "8";
        twenty.left = seventeen;
        twenty.right = twentyfour;
        seventeen.right = eighteen;
        seventeen.left = ten;
        ten.left = eight;
        var newRoot = tree.singleRotation(twenty, AVLTree_2.TSMT$NODE_DIRECTION.RIGHT);
        expect(newRoot.id).to.equal(seventeen.id);
        expect(newRoot.left.id).to.equal(ten.id);
        expect(newRoot.right.id).to.equal(twenty.id);
        expect(twenty.left.id).to.equal(eighteen.id);
        expect(twenty.right.id).to.equal(twentyfour.id);
        expect(ten.left.id).to.equal(eight.id);
    });
    it('multi-node, single-rotation #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        twenty.id = "20";
        seventeen.id = "17";
        twentyfour.id = "24";
        eighteen.id = "18";
        ten.id = "10";
        eight.id = "8";
        ten.left = eight;
        ten.right = eighteen;
        eighteen.left = seventeen;
        eighteen.right = twenty;
        twenty.right = twentyfour;
        var newRoot = tree.singleRotation(ten, AVLTree_2.TSMT$NODE_DIRECTION.LEFT);
        expect(newRoot.id).to.equal(eighteen.id);
        expect(newRoot.left.id).to.equal(ten.id);
        expect(newRoot.right.id).to.equal(twenty.id);
        expect(ten.left.id).to.equal(eight.id);
        expect(ten.right.id).to.equal(seventeen.id);
        expect(twenty.right.id).to.equal(twentyfour.id);
    });
    it('multi-node, double-rotation #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var twelve = new BtreeNode_1.TSMT$BTreeNode(12.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var fifteen = new BtreeNode_1.TSMT$BTreeNode(15.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var thirteen = new BtreeNode_1.TSMT$BTreeNode(13.0);
        twelve.id = "12";
        ten.id = "10";
        twenty.id = "20";
        fifteen.id = "15";
        twentyfour.id = "24";
        thirteen.id = "13";
        twelve.left = ten;
        twelve.right = twenty;
        twenty.left = fifteen;
        twenty.right = twentyfour;
        fifteen.left = thirteen;
        var newRoot = tree.doubleRotation(twelve, AVLTree_2.TSMT$NODE_DIRECTION.LEFT);
        expect(newRoot.id).to.equal(fifteen.id);
        expect(newRoot.left.id).to.equal(twelve.id);
        expect(newRoot.right.id).to.equal(twenty.id);
        expect(twelve.left.id).to.equal(ten.id);
        expect(twelve.right.id).to.equal(thirteen.id);
        expect(twenty.left).to.be.null;
        expect(twenty.right.id).to.equal(twentyfour.id);
    });
    it('multi-node, double-rotation #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var twelve = new BtreeNode_1.TSMT$BTreeNode(12.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var fifteen = new BtreeNode_1.TSMT$BTreeNode(15.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var sixteen = new BtreeNode_1.TSMT$BTreeNode(16.0);
        twelve.id = "12";
        ten.id = "10";
        twenty.id = "20";
        fifteen.id = "15";
        twentyfour.id = "24";
        sixteen.id = "16";
        twelve.left = ten;
        twelve.right = twenty;
        twenty.left = fifteen;
        twenty.right = twentyfour;
        fifteen.right = sixteen;
        var newRoot = tree.doubleRotation(twelve, AVLTree_2.TSMT$NODE_DIRECTION.LEFT);
        expect(newRoot.id).to.equal(fifteen.id);
        expect(newRoot.left.id).to.equal(twelve.id);
        expect(newRoot.right.id).to.equal(twenty.id);
        expect(twelve.left.id).to.equal(ten.id);
        expect(twelve.right).to.be.null;
        expect(twenty.left.id).to.equal(sixteen.id);
        expect(twenty.right.id).to.equal(twentyfour.id);
    });
});
describe('AVL Tree Insert With Rebalance Tests', function () {
    it('no rebalance on one-node insert', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        one.id = "1";
        tree.insert(one);
        expect(tree.size).to.equal(1);
        expect(one.balance).to.equal(0);
    });
    it('no rebalance on two-node insert #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        tree.insert(one);
        tree.insert(two);
        expect(tree.size).to.equal(2);
        expect(one.balance).to.equal(1);
        expect(two.balance).to.equal(0);
        expect(tree.root.id).to.equal(one.id);
        expect(one.right.id).to.equal(two.id);
    });
    it('no rebalance on two-node insert #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        tree.insert(two);
        tree.insert(one);
        expect(tree.size).to.equal(2);
        expect(two.balance).to.equal(-1);
        expect(one.balance).to.equal(0);
        expect(tree.root.id).to.equal(two.id);
        expect(two.left.id).to.equal(one.id);
    });
    it('no rebalance on one node, two-child insert #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        tree.insert(two);
        tree.insert(one);
        tree.insert(three);
        expect(tree.size).to.equal(3);
        expect(tree.root.id).to.equal(two.id);
        expect(two.left.id).to.equal(one.id);
        expect(two.right.id).to.equal(three.id);
        expect(two.balance).to.equal(0);
        expect(one.balance).to.equal(0);
        expect(three.balance).to.equal(0);
    });
    it('no rebalance on one node, two-child insert #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        tree.insert(two);
        tree.insert(three);
        tree.insert(one);
        expect(tree.size).to.equal(3);
        expect(tree.root.id).to.equal(two.id);
        expect(two.left.id).to.equal(one.id);
        expect(two.right.id).to.equal(three.id);
        expect(two.balance).to.equal(0);
        expect(one.balance).to.equal(0);
        expect(three.balance).to.equal(0);
    });
    it('three-node test #1 (single rotation)', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        expect(tree.size).to.equal(3);
        expect(tree.root.id).to.equal(two.id);
        expect(two.left.id).to.equal(one.id);
        expect(two.right.id).to.equal(three.id);
    });
    it('three-node test #2 (single rotation)', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        tree.insert(one);
        tree.insert(two);
        tree.insert(three);
        expect(tree.size).to.equal(3);
        expect(tree.root.id).to.equal(two.id);
        expect(two.left.id).to.equal(one.id);
        expect(two.right.id).to.equal(three.id);
    });
    it('three-node test #3 (double rotation)', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        five.id = "5";
        three.id = "3";
        four.id = "4";
        tree.insert(five);
        tree.insert(three);
        tree.insert(four);
        expect(tree.size).to.equal(3);
        expect(tree.root.id).to.equal(four.id);
        expect(four.left.id).to.equal(three.id);
        expect(four.right.id).to.equal(five.id);
    });
    it('three-node test #4 (double rotation)', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        five.id = "5";
        three.id = "3";
        four.id = "4";
        tree.insert(three);
        tree.insert(five);
        tree.insert(four);
        expect(tree.size).to.equal(3);
        expect(tree.root.id).to.equal(four.id);
        expect(four.left.id).to.equal(three.id);
        expect(four.right.id).to.equal(five.id);
    });
    it('multi-node test #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        twenty.id = "20";
        seventeen.id = "17";
        twentyfour.id = "24";
        eighteen.id = "18";
        ten.id = "10";
        eight.id = "8";
        tree.insert(ten);
        tree.insert(eighteen);
        tree.insert(eight);
        tree.insert(seventeen);
        tree.insert(twenty);
        tree.insert(twentyfour);
        var root = tree.root;
        expect(tree.root.id).to.equal(eighteen.id);
        expect(root.left.id).to.equal(ten.id);
        expect(root.right.id).to.equal(twenty.id);
        expect(ten.left.id).to.equal(eight.id);
        expect(ten.right.id).to.equal(seventeen.id);
        expect(twenty.right.id).to.equal(twentyfour.id);
        expect(root.balance).to.equal(0);
        expect(ten.balance).to.equal(0);
        expect(twenty.balance).to.equal(1);
        expect(eight.balance).to.equal(0);
        expect(seventeen.balance).to.equal(0);
        expect(twentyfour.balance).to.equal(0);
    });
    it('multi-node test #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        twenty.id = "20";
        seventeen.id = "17";
        twentyfour.id = "24";
        eighteen.id = "18";
        ten.id = "10";
        eight.id = "8";
        tree.insert(twenty);
        tree.insert(seventeen);
        tree.insert(twentyfour);
        tree.insert(eighteen);
        tree.insert(ten);
        tree.insert(eight);
        var root = tree.root;
        expect(root.id).to.equal(seventeen.id);
        expect(root.left.id).to.equal(ten.id);
        expect(root.right.id).to.equal(twenty.id);
        expect(ten.left.id).to.equal(eight.id);
        expect(twenty.left.id).to.equal(eighteen.id);
        expect(twenty.right.id).to.equal(twentyfour.id);
        expect(seventeen.balance).to.equal(0);
        expect(ten.balance).to.equal(-1);
        expect(twenty.balance).to.equal(0);
        expect(eight.balance).to.equal(0);
        expect(eighteen.balance).to.equal(0);
        expect(twentyfour.balance).to.equal(0);
    });
    it('multi-node test 3 (sequential inputs)', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var six = new BtreeNode_1.TSMT$BTreeNode(6.0);
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        zero.id = "0";
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        six.id = "6";
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(zero);
        tree.insert(one);
        tree.insert(two);
        expect(tree.root.id).to.equal(one.id);
        expect(tree.size).to.equal(3);
        tree.insert(three);
        var root = tree.root;
        expect(root.id).to.equal(one.id);
        expect(root.left.id).to.equal(zero.id);
        expect(root.right.id).to.equal(two.id);
        expect(tree.size).to.equal(4);
        tree.insert(four);
        root = tree.root;
        expect(root.left.id).to.equal(zero.id);
        expect(root.right.id).to.equal(three.id);
        expect(three.left.id).to.equal(two.id);
        expect(three.right.id).to.equal(four.id);
        tree.insert(five);
        root = tree.root;
        expect(root.id).to.equal(three.id);
        expect(root.left.id).to.equal(one.id);
        expect(root.right.id).to.equal(four.id);
        expect(one.left.id).to.equal(zero.id);
        expect(one.right.id).to.equal(two.id);
        expect(four.right.id).to.equal(five.id);
        expect(three.balance).to.equal(0);
        expect(one.balance).to.equal(0);
        expect(four.balance).to.equal(1);
        expect(zero.balance).to.equal(0);
        expect(two.balance).to.equal(0);
        expect(five.balance).to.equal(0);
        tree.insert(six);
        root = tree.root;
        expect(root.id).to.equal(three.id);
        expect(root.left.id).to.equal(one.id);
        expect(root.right.id).to.equal(five.id);
        expect(one.left.id).to.equal(zero.id);
        expect(one.right.id).to.equal(two.id);
        expect(five.left.id).to.equal(four.id);
        expect(five.right.id).to.equal(six.id);
        expect(tree.size).to.equal(7);
        tree.insert(seven);
        root = tree.root;
        expect(root.id).to.equal(three.id);
        expect(six.right.id).to.equal(seven.id);
        expect(root.balance).to.equal(1);
        expect(six.balance).to.equal(1);
        expect(five.balance).to.equal(1);
        expect(one.balance).to.equal(0);
        tree.insert(eight);
        root = tree.root;
        expect(root.id).to.equal(three.id);
        expect(seven.left.id).to.equal(six.id);
        expect(seven.right.id).to.equal(eight.id);
        expect(root.balance).to.equal(1);
        expect(five.balance).to.equal(1);
        expect(one.balance).to.equal(0);
        tree.insert(nine);
        root = tree.root;
        expect(root.id).to.equal(three.id);
        expect(root.left.id).to.equal(one.id);
        expect(root.right.id).to.equal(seven.id);
        expect(one.left.id).to.equal(zero.id);
        expect(one.right.id).to.equal(two.id);
        expect(seven.left.id).to.equal(five.id);
        expect(seven.right.id).to.equal(eight.id);
        expect(five.left.id).to.equal(four.id);
        expect(five.right.id).to.equal(six.id);
        expect(eight.right.id).to.equal(nine.id);
        expect(root.balance).to.equal(1);
        expect(one.balance).to.equal(0);
        expect(seven.balance).to.equal(0);
        expect(five.balance).to.equal(0);
        expect(eight.balance).to.equal(1);
    });
    it('multi-node test 4 (sequential inputs)', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var six = new BtreeNode_1.TSMT$BTreeNode(6.0);
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        zero.id = "0";
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        six.id = "6";
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(nine);
        tree.insert(eight);
        tree.insert(seven);
        tree.insert(six);
        tree.insert(five);
        tree.insert(four);
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        tree.insert(zero);
        var root = tree.root;
        expect(root.id).to.equal(six.id);
        expect(root.left.id).to.equal(two.id);
        expect(root.right.id).to.equal(eight.id);
        expect(two.left.id).to.equal(one.id);
        expect(two.right.id).to.equal(four.id);
        expect(eight.left.id).to.equal(seven.id);
        expect(eight.right.id).to.equal(nine.id);
        expect(four.left.id).to.equal(three.id);
        expect(four.right.id).to.equal(five.id);
        expect(one.left.id).to.equal(zero.id);
        expect(root.balance).to.equal(-1);
        expect(one.balance).to.equal(-1);
        expect(two.balance).to.equal(0);
        expect(eight.balance).to.equal(0);
        expect(four.balance).to.equal(0);
    });
    it('insert by value testt #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        tree.insertByValue(3, "3");
        tree.insertByValue(20, "20");
        tree.insertByValue(17, "17");
        tree.insertByValue(4, "4");
        tree.insertByValue(1, "1");
        var root = tree.root;
        var left = root.left;
        var right = root.right;
        expect(tree.size).to.equal(5);
        expect(root.value).to.equal(17);
        expect(left.value).to.equal(3);
        expect(right.value).to.equal(20);
    });
});
describe('AVL Tree Min/Max/Find Tests', function () {
    it('returns null for empty tree', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        expect(tree.size).to.equal(0);
        expect(tree.getMin()).to.be.null;
        expect(tree.getMax()).to.be.null;
        expect(tree.find(1.0)).to.be.null;
    });
    it('returns correct results from 1-node tree', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        one.id = "1";
        tree.insert(one);
        expect(tree.size).to.equal(1);
        expect(tree.getMin().id).to.equal(one.id);
        expect(tree.getMax().id).to.equal(one.id);
        expect(tree.find(1.0).id).to.equal(one.id);
    });
    it('returns correct results from 2-node tree #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        tree.insert(one);
        tree.insert(two);
        expect(tree.size).to.equal(2);
        expect(tree.getMin().id).to.equal(one.id);
        expect(tree.getMax().id).to.equal(two.id);
        expect(tree.find(1.0).id).to.equal(one.id);
        expect(tree.find(2.0).id).to.equal(two.id);
        expect(tree.find(3.0)).to.be.null;
    });
    it('returns correct results from 2-node tree #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        tree.insert(two);
        tree.insert(one);
        expect(tree.size).to.equal(2);
        expect(tree.getMin().id).to.equal(one.id);
        expect(tree.getMax().id).to.equal(two.id);
        expect(tree.find(1.0).id).to.equal(one.id);
        expect(tree.find(2.0).id).to.equal(two.id);
        expect(tree.find(3.0)).to.be.null;
    });
    it('returns correct results from 3-node tree #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        tree.insert(two);
        tree.insert(one);
        tree.insert(three);
        expect(tree.size).to.equal(3);
        expect(tree.getMin().id).to.equal(one.id);
        expect(tree.getMax().id).to.equal(three.id);
        expect(tree.find(1.0).id).to.equal(one.id);
        expect(tree.find(2.0).id).to.equal(two.id);
        expect(tree.find(3.0).id).to.equal(three.id);
        expect(tree.find(5.0)).to.be.null;
    });
    it('returns correct results from 3-node tree #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        expect(tree.size).to.equal(3);
        expect(tree.getMin().id).to.equal(one.id);
        expect(tree.getMax().id).to.equal(three.id);
        expect(tree.find(1.0).id).to.equal(one.id);
        expect(tree.find(2.0).id).to.equal(two.id);
        expect(tree.find(3.0).id).to.equal(three.id);
        expect(tree.find(5.0)).to.be.null;
    });
    it('multi-node test #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        twenty.id = "20";
        seventeen.id = "17";
        twentyfour.id = "24";
        eighteen.id = "18";
        ten.id = "10";
        eight.id = "8";
        tree.insert(ten);
        tree.insert(eighteen);
        tree.insert(eight);
        tree.insert(seventeen);
        tree.insert(twenty);
        tree.insert(twentyfour);
        expect(tree.size).to.equal(6);
        expect(tree.getMin().id).to.equal(eight.id);
        expect(tree.getMax().id).to.equal(twentyfour.id);
        expect(tree.find(18).id).to.equal(eighteen.id);
        expect(tree.find(10).id).to.equal(ten.id);
        expect(tree.find(17).id).to.equal(seventeen.id);
        expect(tree.find(5.0)).to.be.null;
    });
    it('multi-node test #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        twenty.id = "20";
        seventeen.id = "17";
        twentyfour.id = "24";
        eighteen.id = "18";
        ten.id = "10";
        eight.id = "8";
        tree.insert(twenty);
        tree.insert(seventeen);
        tree.insert(twentyfour);
        tree.insert(eighteen);
        tree.insert(ten);
        tree.insert(eight);
        expect(tree.size).to.equal(6);
        expect(tree.getMin().id).to.equal(eight.id);
        expect(tree.getMax().id).to.equal(twentyfour.id);
        expect(tree.find(18).id).to.equal(eighteen.id);
        expect(tree.find(10).id).to.equal(ten.id);
        expect(tree.find(17).id).to.equal(seventeen.id);
        expect(tree.find(5.0)).to.be.null;
    });
    it('multi-node test #3', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var six = new BtreeNode_1.TSMT$BTreeNode(6.0);
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        zero.id = "0";
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        six.id = "6";
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(zero);
        tree.insert(one);
        tree.insert(two);
        tree.insert(three);
        tree.insert(four);
        tree.insert(five);
        tree.insert(six);
        tree.insert(seven);
        tree.insert(eight);
        tree.insert(nine);
        expect(tree.size).to.equal(10);
        expect(tree.getMin().id).to.equal(zero.id);
        expect(tree.getMax().id).to.equal(nine.id);
        expect(tree.find(8).id).to.equal(eight.id);
        expect(tree.find(0).id).to.equal(zero.id);
        expect(tree.find(7).id).to.equal(seven.id);
        expect(tree.find(15.0)).to.be.null;
    });
    it('multi-node test #4', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var six = new BtreeNode_1.TSMT$BTreeNode(6.0);
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        zero.id = "0";
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        six.id = "6";
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(nine);
        tree.insert(eight);
        tree.insert(seven);
        tree.insert(six);
        tree.insert(five);
        tree.insert(four);
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        tree.insert(zero);
        expect(tree.size).to.equal(10);
        expect(tree.getMin().id).to.equal(zero.id);
        expect(tree.getMax().id).to.equal(nine.id);
        expect(tree.find(8).id).to.equal(eight.id);
        expect(tree.find(6).id).to.equal(six.id);
        expect(tree.find(4).id).to.equal(four.id);
        expect(tree.find(15.0)).to.be.null;
    });
});
describe('Inorder Traversal Tests', function () {
    var utils = new BTreeUtils_1.TSMT$BTreeUtils();
    it('inorder returns empty path for null node', function () {
        var path = utils.inorder(null);
        expect(path.length).to.equal(0);
    });
    it('inorder returns singleton path for one-node tree node', function () {
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        node.id = "1";
        var path = utils.inorder(node);
        expect(path.length).to.equal(1);
        expect(path[0].id).to.equal(node.id);
    });
    it('inorder two-node test #1', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        one.right = two;
        var path = utils.inorder(one);
        expect(path.length).to.equal(2);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(two.id);
    });
    it('inorder two-node test #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        two.left = one;
        var path = utils.inorder(two);
        expect(path.length).to.equal(2);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(two.id);
    });
    it('inorder three-node test', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        one.left = two;
        one.right = three;
        var path = utils.inorder(one);
        expect(path.length).to.equal(3);
        expect(path[0].id).to.equal(two.id);
        expect(path[1].id).to.equal(one.id);
        expect(path[2].id).to.equal(three.id);
    });
    it('inorder multi-node test #1', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        four.left = two;
        four.right = five;
        two.left = one;
        two.right = three;
        var path = utils.inorder(four);
        expect(path.length).to.equal(5);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(two.id);
        expect(path[2].id).to.equal(three.id);
        expect(path[3].id).to.equal(four.id);
        expect(path[4].id).to.equal(five.id);
    });
    it('inorder multi-node test #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        two.left = one;
        two.right = three;
        three.left = four;
        three.right = five;
        var path = utils.inorder(two);
        expect(path.length).to.equal(5);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(two.id);
        expect(path[2].id).to.equal(four.id);
        expect(path[3].id).to.equal(three.id);
        expect(path[4].id).to.equal(five.id);
    });
    it('inorder multi-node test #3', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        // this example taken from https://www.cs.swarthmore.edu/~newhall/unixhelp/Java_bst.pdf
        var twentyfive = new BtreeNode_1.TSMT$BTreeNode(25);
        var fifteen = new BtreeNode_1.TSMT$BTreeNode(15);
        var fifty = new BtreeNode_1.TSMT$BTreeNode(50);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10);
        var twentytwo = new BtreeNode_1.TSMT$BTreeNode(22);
        var thirtyfive = new BtreeNode_1.TSMT$BTreeNode(35);
        var seventy = new BtreeNode_1.TSMT$BTreeNode(70);
        var four = new BtreeNode_1.TSMT$BTreeNode(4);
        var twelve = new BtreeNode_1.TSMT$BTreeNode(12);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24);
        var thirtyone = new BtreeNode_1.TSMT$BTreeNode(31);
        var fortyfour = new BtreeNode_1.TSMT$BTreeNode(44);
        var sixtysix = new BtreeNode_1.TSMT$BTreeNode(66);
        var ninety = new BtreeNode_1.TSMT$BTreeNode(90);
        twentyfive.id = "25";
        fifteen.id = "15";
        fifty.id = "50";
        ten.id = "10";
        twentytwo.id = "22";
        thirtyfive.id = "35";
        seventy.id = "70";
        four.id = "4";
        twelve.id = "12";
        eighteen.id = "18";
        twentyfour.id = "24";
        thirtyone.id = "31";
        fortyfour.id = "44";
        sixtysix.id = "66";
        ninety.id = "90";
        tree.insert(twentyfive);
        tree.insert(fifteen);
        tree.insert(fifty);
        tree.insert(ten);
        tree.insert(twentytwo);
        tree.insert(thirtyfive);
        tree.insert(seventy);
        tree.insert(four);
        tree.insert(twelve);
        tree.insert(eighteen);
        tree.insert(twentyfour);
        tree.insert(thirtyone);
        tree.insert(fortyfour);
        tree.insert(sixtysix);
        tree.insert(ninety);
        var root = tree.root;
        var path = utils.inorder(root);
        expect(path.length).to.equal(15);
        expect(path[0].id).to.equal(four.id);
        expect(path[1].id).to.equal(ten.id);
        expect(path[2].id).to.equal(twelve.id);
        expect(path[3].id).to.equal(fifteen.id);
        expect(path[4].id).to.equal(eighteen.id);
        expect(path[5].id).to.equal(twentytwo.id);
        expect(path[6].id).to.equal(twentyfour.id);
        expect(path[7].id).to.equal(twentyfive.id);
        expect(path[8].id).to.equal(thirtyone.id);
        expect(path[9].id).to.equal(thirtyfive.id);
        expect(path[10].id).to.equal(fortyfour.id);
        expect(path[11].id).to.equal(fifty.id);
        expect(path[12].id).to.equal(sixtysix.id);
        expect(path[13].id).to.equal(seventy.id);
        expect(path[14].id).to.equal(ninety.id);
    });
    it('inorder multi-node test #4', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var six = new BtreeNode_1.TSMT$BTreeNode(6.0);
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        zero.id = "0";
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        six.id = "6";
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(nine);
        tree.insert(eight);
        tree.insert(seven);
        tree.insert(six);
        tree.insert(five);
        tree.insert(four);
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        tree.insert(zero);
        var root = tree.root;
        var path = utils.inorder(root);
        // results should be in sorted (ascending) order of value
        expect(path.length).to.equal(10);
        expect(path[0].id).to.equal(zero.id);
        expect(path[1].id).to.equal(one.id);
        expect(path[2].id).to.equal(two.id);
        expect(path[3].id).to.equal(three.id);
        expect(path[4].id).to.equal(four.id);
        expect(path[5].id).to.equal(five.id);
        expect(path[6].id).to.equal(six.id);
        expect(path[7].id).to.equal(seven.id);
        expect(path[8].id).to.equal(eight.id);
        expect(path[9].id).to.equal(nine.id);
    });
});
describe('Preorder Traversal Tests', function () {
    var utils = new BTreeUtils_1.TSMT$BTreeUtils();
    it('preorder returns empty path for null node', function () {
        var path = utils.preorder(null);
        expect(path.length).to.equal(0);
    });
    it('preorder returns singleton path for one-node tree node', function () {
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        node.id = "1";
        var path = utils.inorder(node);
        expect(path.length).to.equal(1);
        expect(path[0].id).to.equal(node.id);
    });
    it('preorder two-node test #1', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        one.right = two;
        var path = utils.preorder(one);
        expect(path.length).to.equal(2);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(two.id);
    });
    it('preorder two-node test #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        two.left = one;
        var path = utils.preorder(two);
        expect(path.length).to.equal(2);
        expect(path[0].id).to.equal(two.id);
        expect(path[1].id).to.equal(one.id);
    });
    it('preorder three-node test', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        one.left = two;
        one.right = three;
        var path = utils.preorder(one);
        expect(path.length).to.equal(3);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(two.id);
        expect(path[2].id).to.equal(three.id);
    });
    it('preorder multi-node test #1', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        four.left = two;
        four.right = five;
        two.left = one;
        two.right = three;
        var path = utils.preorder(four);
        expect(path.length).to.equal(5);
        expect(path[0].id).to.equal(four.id);
        expect(path[1].id).to.equal(two.id);
        expect(path[2].id).to.equal(one.id);
        expect(path[3].id).to.equal(three.id);
        expect(path[4].id).to.equal(five.id);
    });
    it('preorder multi-node test #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        two.left = one;
        two.right = four;
        four.left = three;
        four.right = five;
        var path = utils.preorder(two);
        expect(path.length).to.equal(5);
        expect(path[0].id).to.equal(two.id);
        expect(path[1].id).to.equal(one.id);
        expect(path[2].id).to.equal(four.id);
        expect(path[3].id).to.equal(three.id);
        expect(path[4].id).to.equal(five.id);
    });
    it('preorder multi-node test #3', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        // this example taken from https://www.cs.swarthmore.edu/~newhall/unixhelp/Java_bst.pdf
        var twentyfive = new BtreeNode_1.TSMT$BTreeNode(25);
        var fifteen = new BtreeNode_1.TSMT$BTreeNode(15);
        var fifty = new BtreeNode_1.TSMT$BTreeNode(50);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10);
        var twentytwo = new BtreeNode_1.TSMT$BTreeNode(22);
        var thirtyfive = new BtreeNode_1.TSMT$BTreeNode(35);
        var seventy = new BtreeNode_1.TSMT$BTreeNode(70);
        var four = new BtreeNode_1.TSMT$BTreeNode(4);
        var twelve = new BtreeNode_1.TSMT$BTreeNode(12);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24);
        var thirtyone = new BtreeNode_1.TSMT$BTreeNode(31);
        var fortyfour = new BtreeNode_1.TSMT$BTreeNode(44);
        var sixtysix = new BtreeNode_1.TSMT$BTreeNode(66);
        var ninety = new BtreeNode_1.TSMT$BTreeNode(90);
        twentyfive.id = "25";
        fifteen.id = "15";
        fifty.id = "50";
        ten.id = "10";
        twentytwo.id = "22";
        thirtyfive.id = "35";
        seventy.id = "70";
        four.id = "4";
        twelve.id = "12";
        eighteen.id = "18";
        twentyfour.id = "24";
        thirtyone.id = "31";
        fortyfour.id = "44";
        sixtysix.id = "66";
        ninety.id = "90";
        tree.insert(twentyfive);
        tree.insert(fifteen);
        tree.insert(fifty);
        tree.insert(ten);
        tree.insert(twentytwo);
        tree.insert(thirtyfive);
        tree.insert(seventy);
        tree.insert(four);
        tree.insert(twelve);
        tree.insert(eighteen);
        tree.insert(twentyfour);
        tree.insert(thirtyone);
        tree.insert(fortyfour);
        tree.insert(sixtysix);
        tree.insert(ninety);
        var root = tree.root;
        var path = utils.preorder(root);
        expect(path.length).to.equal(15);
        expect(path[0].id).to.equal(twentyfive.id);
        expect(path[1].id).to.equal(fifteen.id);
        expect(path[2].id).to.equal(ten.id);
        expect(path[3].id).to.equal(four.id);
        expect(path[4].id).to.equal(twelve.id);
        expect(path[5].id).to.equal(twentytwo.id);
        expect(path[6].id).to.equal(eighteen.id);
        expect(path[7].id).to.equal(twentyfour.id);
        expect(path[8].id).to.equal(fifty.id);
        expect(path[9].id).to.equal(thirtyfive.id);
        expect(path[10].id).to.equal(thirtyone.id);
        expect(path[11].id).to.equal(fortyfour.id);
        expect(path[12].id).to.equal(seventy.id);
        expect(path[13].id).to.equal(sixtysix.id);
        expect(path[14].id).to.equal(ninety.id);
    });
    it('preorder multi-node test #4', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var six = new BtreeNode_1.TSMT$BTreeNode(6.0);
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        zero.id = "0";
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        six.id = "6";
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(nine);
        tree.insert(eight);
        tree.insert(seven);
        tree.insert(six);
        tree.insert(five);
        tree.insert(four);
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        tree.insert(zero);
        var root = tree.root;
        var path = utils.preorder(root);
        expect(path.length).to.equal(10);
        expect(path[0].id).to.equal(six.id);
        expect(path[1].id).to.equal(two.id);
        expect(path[2].id).to.equal(one.id);
        expect(path[3].id).to.equal(zero.id);
        expect(path[4].id).to.equal(four.id);
        expect(path[5].id).to.equal(three.id);
        expect(path[6].id).to.equal(five.id);
        expect(path[7].id).to.equal(eight.id);
        expect(path[8].id).to.equal(seven.id);
        expect(path[9].id).to.equal(nine.id);
    });
});
describe('Postorder Traversal Tests', function () {
    var utils = new BTreeUtils_1.TSMT$BTreeUtils();
    it('postorder returns empty path for null node', function () {
        var path = utils.postorder(null);
        expect(path.length).to.equal(0);
    });
    it('postorder returns singleton path for one-node tree node', function () {
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        node.id = "1";
        var path = utils.postorder(node);
        expect(path.length).to.equal(1);
        expect(path[0].id).to.equal(node.id);
    });
    it('postorder two-node test #1', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        one.right = two;
        var path = utils.postorder(one);
        expect(path.length).to.equal(2);
        expect(path[0].id).to.equal(two.id);
        expect(path[1].id).to.equal(one.id);
    });
    it('postorder two-node test #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        two.left = one;
        var path = utils.postorder(two);
        expect(path.length).to.equal(2);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(two.id);
    });
    it('postorder three-node test', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        one.left = two;
        one.right = three;
        var path = utils.preorder(one);
        expect(path.length).to.equal(3);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(two.id);
        expect(path[2].id).to.equal(three.id);
    });
    it('postorder multi-node test #1', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        four.left = two;
        four.right = five;
        two.left = one;
        two.right = three;
        var path = utils.postorder(four);
        expect(path.length).to.equal(5);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(three.id);
        expect(path[2].id).to.equal(two.id);
        expect(path[3].id).to.equal(five.id);
        expect(path[4].id).to.equal(four.id);
    });
    it('postorder multi-node test #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        two.left = one;
        two.right = four;
        four.left = three;
        four.right = five;
        var path = utils.postorder(two);
        expect(path.length).to.equal(5);
        expect(path[0].id).to.equal(one.id);
        expect(path[1].id).to.equal(three.id);
        expect(path[2].id).to.equal(five.id);
        expect(path[3].id).to.equal(four.id);
        expect(path[4].id).to.equal(two.id);
    });
    it('postorder multi-node test #3', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        // this example taken from https://www.cs.swarthmore.edu/~newhall/unixhelp/Java_bst.pdf
        var twentyfive = new BtreeNode_1.TSMT$BTreeNode(25);
        var fifteen = new BtreeNode_1.TSMT$BTreeNode(15);
        var fifty = new BtreeNode_1.TSMT$BTreeNode(50);
        var ten = new BtreeNode_1.TSMT$BTreeNode(10);
        var twentytwo = new BtreeNode_1.TSMT$BTreeNode(22);
        var thirtyfive = new BtreeNode_1.TSMT$BTreeNode(35);
        var seventy = new BtreeNode_1.TSMT$BTreeNode(70);
        var four = new BtreeNode_1.TSMT$BTreeNode(4);
        var twelve = new BtreeNode_1.TSMT$BTreeNode(12);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24);
        var thirtyone = new BtreeNode_1.TSMT$BTreeNode(31);
        var fortyfour = new BtreeNode_1.TSMT$BTreeNode(44);
        var sixtysix = new BtreeNode_1.TSMT$BTreeNode(66);
        var ninety = new BtreeNode_1.TSMT$BTreeNode(90);
        twentyfive.id = "25";
        fifteen.id = "15";
        fifty.id = "50";
        ten.id = "10";
        twentytwo.id = "22";
        thirtyfive.id = "35";
        seventy.id = "70";
        four.id = "4";
        twelve.id = "12";
        eighteen.id = "18";
        twentyfour.id = "24";
        thirtyone.id = "31";
        fortyfour.id = "44";
        sixtysix.id = "66";
        ninety.id = "90";
        tree.insert(twentyfive);
        tree.insert(fifteen);
        tree.insert(fifty);
        tree.insert(ten);
        tree.insert(twentytwo);
        tree.insert(thirtyfive);
        tree.insert(seventy);
        tree.insert(four);
        tree.insert(twelve);
        tree.insert(eighteen);
        tree.insert(twentyfour);
        tree.insert(thirtyone);
        tree.insert(fortyfour);
        tree.insert(sixtysix);
        tree.insert(ninety);
        var root = tree.root;
        var path = utils.postorder(root);
        expect(path.length).to.equal(15);
        expect(path[0].id).to.equal(four.id);
        expect(path[1].id).to.equal(twelve.id);
        expect(path[2].id).to.equal(ten.id);
        expect(path[3].id).to.equal(eighteen.id);
        expect(path[4].id).to.equal(twentyfour.id);
        expect(path[5].id).to.equal(twentytwo.id);
        expect(path[6].id).to.equal(fifteen.id);
        expect(path[7].id).to.equal(thirtyone.id);
        expect(path[8].id).to.equal(fortyfour.id);
        expect(path[9].id).to.equal(thirtyfive.id);
        expect(path[10].id).to.equal(sixtysix.id);
        expect(path[11].id).to.equal(ninety.id);
        expect(path[12].id).to.equal(seventy.id);
        expect(path[13].id).to.equal(fifty.id);
        expect(path[14].id).to.equal(twentyfive.id);
    });
    it('postorder multi-node test #4', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var six = new BtreeNode_1.TSMT$BTreeNode(6.0);
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        zero.id = "0";
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        six.id = "6";
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(nine);
        tree.insert(eight);
        tree.insert(seven);
        tree.insert(six);
        tree.insert(five);
        tree.insert(four);
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        tree.insert(zero);
        var root = tree.root;
        var path = utils.postorder(root);
        expect(path.length).to.equal(10);
        expect(path[0].id).to.equal(zero.id);
        expect(path[1].id).to.equal(one.id);
        expect(path[2].id).to.equal(three.id);
        expect(path[3].id).to.equal(five.id);
        expect(path[4].id).to.equal(four.id);
        expect(path[5].id).to.equal(two.id);
        expect(path[6].id).to.equal(seven.id);
        expect(path[7].id).to.equal(nine.id);
        expect(path[8].id).to.equal(eight.id);
        expect(path[9].id).to.equal(six.id);
    });
});
describe('BFS Traversal Tests', function () {
    var utils = new BTreeUtils_1.TSMT$BTreeUtils();
    it('BFS returns empty path for null node', function () {
        var path = utils.BFS(null);
        expect(path.length).to.equal(0);
    });
    it('BFS singleton node test', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var path = utils.BFS(one);
        expect(path.length).to.equal(1);
    });
    it('BFS 2-node test #1', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        one.right = two;
        var path = utils.BFS(one);
        expect(path.length).to.equal(2);
        expect(path[0].id).to.equal("1");
        expect(path[1].id).to.equal("2");
    });
    it('BFS 2-node test #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        two.left = one;
        var path = utils.BFS(two);
        expect(path.length).to.equal(2);
        expect(path[0].id).to.equal("2");
        expect(path[1].id).to.equal("1");
    });
    it('BFS 3-node test', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        two.left = one;
        two.right = three;
        var path = utils.BFS(two);
        expect(path.length).to.equal(3);
        expect(path[0].id).to.equal("2");
        expect(path[1].id).to.equal("1");
        expect(path[2].id).to.equal("3");
    });
    it('BFS 4-node test #1', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        zero.id = "0";
        two.left = one;
        two.right = three;
        one.left = zero;
        var path = utils.BFS(two);
        expect(path.length).to.equal(4);
        expect(path[0].id).to.equal("2");
        expect(path[1].id).to.equal("1");
        expect(path[2].id).to.equal("3");
        expect(path[3].id).to.equal("0");
    });
    it('BFS 4-node test #2', function () {
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        two.left = one;
        two.right = three;
        three.right = four;
        var path = utils.BFS(two);
        expect(path.length).to.equal(4);
        expect(path[0].id).to.equal("2");
        expect(path[1].id).to.equal("1");
        expect(path[2].id).to.equal("3");
        expect(path[3].id).to.equal("4");
    });
    it('BFS multi-node test', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var zero = new BtreeNode_1.TSMT$BTreeNode(0);
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        var five = new BtreeNode_1.TSMT$BTreeNode(5.0);
        var six = new BtreeNode_1.TSMT$BTreeNode(6.0);
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        zero.id = "0";
        one.id = "1";
        two.id = "2";
        three.id = "3";
        four.id = "4";
        five.id = "5";
        six.id = "6";
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(nine);
        tree.insert(eight);
        tree.insert(seven);
        tree.insert(six);
        tree.insert(five);
        tree.insert(four);
        tree.insert(three);
        tree.insert(two);
        tree.insert(one);
        tree.insert(zero);
        var root = tree.root;
        var path = utils.BFS(root);
        expect(path.length).to.equal(10);
        expect(path[0].id).to.equal(six.id);
        expect(path[1].id).to.equal(two.id);
        expect(path[2].id).to.equal(eight.id);
        expect(path[3].id).to.equal(one.id);
        expect(path[4].id).to.equal(four.id);
        expect(path[5].id).to.equal(seven.id);
        expect(path[6].id).to.equal(nine.id);
        expect(path[7].id).to.equal(zero.id);
        expect(path[8].id).to.equal(three.id);
        expect(path[9].id).to.equal(five.id);
    });
});
describe('TSMT$AVLTree<T> Clear/FromArray Tests', function () {
    it('fromArray does nothing on empty or null array', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        tree.fromArray(null);
        expect(tree.size).to.equal(0);
        expect(tree.root).to.be.null;
        tree.fromArray([]);
        expect(tree.size).to.equal(0);
        expect(tree.root).to.be.null;
    });
    it('multi-node insert/clear/fromArray test #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(nine);
        tree.insert(eight);
        tree.insert(seven);
        expect(tree.size).to.equal(3);
        expect(tree.root.id).to.equal(eight.id);
        tree.clear();
        expect(tree.size).to.equal(0);
        expect(tree.root).to.be.null;
        tree.fromArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
        var root = tree.root;
        expect(root.value).to.equal(3);
        expect(root.left.value).to.equal(1);
        expect(root.right.value).to.equal(7);
    });
    it('multi-node insert/clear/fromArray test #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var seven = new BtreeNode_1.TSMT$BTreeNode(7.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var nine = new BtreeNode_1.TSMT$BTreeNode(9.0);
        seven.id = "7";
        eight.id = "8";
        nine.id = "9";
        tree.insert(nine);
        tree.insert(eight);
        tree.insert(seven);
        expect(tree.size).to.equal(3);
        expect(tree.root.id).to.equal(eight.id);
        tree.clear();
        expect(tree.size).to.equal(0);
        expect(tree.root).to.be.null;
        tree.fromArray([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);
        var root = tree.root;
        expect(root.value).to.equal(6);
        expect(root.left.value).to.equal(2);
        expect(root.right.value).to.equal(8);
    });
});
describe('TSMT$AVLTree<T> Delete Tests', function () {
    it('delete takes no action on empty tree', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        tree.delete(node);
        expect(tree.size).to.equal(0);
        expect(tree.root).to.be.null;
    });
    it('delete takes no action on null input node', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        node.id = "1";
        tree.insert(node);
        tree.delete(null);
        expect(tree.size).to.equal(1);
        expect(tree.root.id).to.equal(node.id);
    });
    it('correctly deletes node from singleton tree', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var node = new BtreeNode_1.TSMT$BTreeNode(1.0);
        node.id = "1";
        tree.insert(node);
        tree.delete(node);
        expect(tree.size).to.equal(0);
        expect(tree.root).to.be.null;
    });
    // noew the fun begins ...
    it('2-node tree test #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        tree.insert(one);
        tree.insert(two);
        tree.delete(two);
        expect(tree.size).to.equal(1);
        expect(tree.root.id).to.equal(one.id);
    });
    it('2-node tree test #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        one.id = "1";
        two.id = "2";
        tree.insert(one);
        tree.insert(two);
        tree.delete(one);
        expect(tree.size).to.equal(1);
        expect(tree.root.id).to.equal(two.id);
        expect(tree.root.hasLeft).to.be.false;
        expect(tree.root.hasRight).to.be.false;
    });
    it('2-node tree test #3', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        two.id = "2";
        one.id = "1";
        tree.insert(two);
        tree.insert(one);
        tree.delete(two);
        expect(tree.size).to.equal(1);
        expect(tree.root.id).to.equal(one.id);
        expect(tree.root.hasLeft).to.be.false;
        expect(tree.root.hasRight).to.be.false;
    });
    it('3-node tree test #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        two.id = "2";
        one.id = "1";
        three.id = "3";
        tree.insert(two);
        tree.insert(one);
        tree.insert(three);
        tree.delete(one);
        var root = tree.root;
        expect(tree.size).to.equal(2);
        expect(root.id).to.equal(two.id);
        expect(root.right.id).to.equal(three.id);
        expect(root.hasLeft).to.be.false;
    });
    it('3-node tree test #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        two.id = "2";
        one.id = "1";
        three.id = "3";
        tree.insert(two);
        tree.insert(one);
        tree.insert(three);
        tree.delete(three);
        var root = tree.root;
        expect(tree.size).to.equal(2);
        expect(root.id).to.equal(two.id);
        expect(root.left.id).to.equal(one.id);
        expect(root.hasRight).to.be.false;
    });
    it('3-node tree test #3', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        two.id = "2";
        one.id = "1";
        three.id = "3";
        tree.insert(two);
        tree.insert(one);
        tree.insert(three);
        tree.delete(two);
        var root = tree.root;
        expect(tree.size).to.equal(2);
        expect(root.id).to.equal(three.id);
        expect(root.left.id).to.equal(one.id);
        expect(root.hasRight).to.be.false;
    });
    it('multi-node tree test #1', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        two.id = "2";
        one.id = "1";
        three.id = "3";
        four.id = "4";
        tree.insert(two);
        tree.insert(one);
        tree.insert(four);
        tree.insert(three);
        tree.delete(three);
        var root = tree.root;
        expect(tree.size).to.equal(3);
        expect(root.id).to.equal(two.id);
        expect(root.right.id).to.equal(four.id);
        expect(four.hasRight).to.be.false;
        expect(four.hasLeft).to.be.false;
    });
    it('multi-node tree test #2', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        two.id = "2";
        one.id = "1";
        three.id = "3";
        four.id = "4";
        tree.insert(two);
        tree.insert(one);
        tree.insert(four);
        tree.insert(three);
        tree.delete(one);
        var root = tree.root;
        expect(tree.size).to.equal(3);
        expect(root.id).to.equal(three.id);
        expect(root.right.id).to.equal(four.id);
        expect(root.left.id).to.equal(two.id);
        expect(four.hasRight).to.be.false;
        expect(four.hasLeft).to.be.false;
        expect(two.hasLeft).to.be.false;
        expect(two.hasRight).to.be.false;
    });
    it('multi-node tree test #3', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        two.id = "2";
        one.id = "1";
        three.id = "3";
        four.id = "4";
        tree.insert(two);
        tree.insert(one);
        tree.insert(four);
        tree.insert(three);
        tree.delete(four);
        var root = tree.root;
        // we should no do this, but can get away with it for such a tiny tree - traverse the tree directly post-delete (do not rely on other node references remaining valid)
        expect(tree.size).to.equal(3);
        expect(root.id).to.equal(two.id);
        expect(root.right.id).to.equal(three.id);
        expect(root.left.id).to.equal(one.id);
        expect(three.hasRight).to.be.false;
        expect(three.hasLeft).to.be.false;
        expect(one.hasLeft).to.be.false;
        expect(one.hasRight).to.be.false;
    });
    it('multi-node tree test #4', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var one = new BtreeNode_1.TSMT$BTreeNode(1.0);
        var two = new BtreeNode_1.TSMT$BTreeNode(2.0);
        var three = new BtreeNode_1.TSMT$BTreeNode(3.0);
        var four = new BtreeNode_1.TSMT$BTreeNode(4.0);
        two.id = "2";
        one.id = "1";
        three.id = "3";
        four.id = "4";
        tree.insert(two);
        tree.insert(one);
        tree.insert(four);
        tree.insert(three);
        tree.delete(two);
        var root = tree.root;
        expect(tree.size).to.equal(3);
        expect(root.id).to.equal(three.id);
        expect(root.right.id).to.equal(four.id);
        expect(root.left.id).to.equal(one.id);
        expect(four.hasRight).to.be.false;
        expect(four.hasLeft).to.be.false;
        expect(one.hasLeft).to.be.false;
        expect(one.hasRight).to.be.false;
        expect(three.balance).to.equal(0);
        expect(one.balance).to.equal(0);
        expect(four.balance).to.equal(0);
    });
    it('multi-node tree test #5', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        ten.id = "10";
        eight.id = "8";
        eighteen.id = "18";
        seventeen.id = "17";
        twenty.id = "20";
        twentyfour.id = "24";
        tree.insert(ten);
        tree.insert(eight);
        tree.insert(eighteen);
        tree.insert(seventeen);
        tree.insert(twenty);
        tree.insert(twentyfour);
        tree.delete(ten);
        var root = tree.root;
        expect(tree.size).to.equal(5);
        expect(root.id).to.equal(eighteen.id);
        expect(root.left.id).to.equal("17");
        expect(root.right.id).to.equal("20");
        // traverse the tree to obtain node information; do not use prior references
        var left = root.left;
        var right = root.right;
        expect(left.id).to.equal("17");
        expect(left.value).to.equal(17);
        expect(left.left.id).to.equal("8");
        expect(left.right).to.be.null;
        expect(root.balance).to.equal(0);
        expect(left.balance).to.equal(-1);
        expect(right.balance).to.equal(1);
        expect(left.left.balance).to.equal(0);
        expect(right.right.balance).to.equal(0);
    });
    it('multi-node tree test #6', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        var ten = new BtreeNode_1.TSMT$BTreeNode(10.0);
        var eight = new BtreeNode_1.TSMT$BTreeNode(8.0);
        var eighteen = new BtreeNode_1.TSMT$BTreeNode(18.0);
        var seventeen = new BtreeNode_1.TSMT$BTreeNode(17.0);
        var fifteen = new BtreeNode_1.TSMT$BTreeNode(15.0);
        var twenty = new BtreeNode_1.TSMT$BTreeNode(20.0);
        var twentyfour = new BtreeNode_1.TSMT$BTreeNode(24.0);
        ten.id = "10";
        eight.id = "8";
        eighteen.id = "18";
        seventeen.id = "17";
        fifteen.id = "15";
        twenty.id = "20";
        twentyfour.id = "24";
        tree.insert(ten);
        tree.insert(eight);
        tree.insert(eighteen);
        tree.insert(seventeen);
        tree.insert(twenty);
        tree.insert(twentyfour);
        tree.insert(fifteen);
        tree.delete(ten);
        var root = tree.root;
        var left = root.left;
        var right = root.right;
        expect(tree.size).to.equal(6);
        expect(root.id).to.equal(eighteen.id);
        expect(left.id).to.equal("15");
        expect(left.value).to.equal(15);
        expect(right.id).to.equal("20");
        // traverse the tree to obtain node information; do not use prior references
        right = left.right;
        left = left.left;
        expect(left.id).to.equal("8");
        expect(left.value).to.equal(8);
        expect(right.id).to.equal("17");
        expect(right.value).to.equal(17);
        expect(root.right.right.id).to.equal("24");
        expect(root.balance).to.equal(0);
        expect(root.left.balance).to.equal(0);
        expect(root.right.balance).to.equal(1);
    });
    it('multi-node tree test #7', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        tree.fromArray([10, 8, 18, 17, 20, 24, 15]);
        var node = tree.find(10);
        expect(node.id).to.equal("0");
        expect(node.value).to.equal(10);
        tree.delete(node);
        node = tree.find(20);
        tree.delete(node);
        var root = tree.root;
        var left = root.left;
        var right = root.right;
        expect(tree.size).to.equal(5);
        expect(root.value).to.equal(18);
        expect(left.value).to.equal(15);
        expect(right.value).to.equal(24);
        expect(left.left.value).to.equal(8);
        expect(left.right.value).to.equal(17);
        expect(root.balance).to.equal(-1);
        expect(left.balance).to.equal(0);
        expect(right.balance).to.equal(0);
    });
    it('multi-node tree test #8', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        tree.fromArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
        var root = tree.root;
        var left = root.left;
        var right = root.right;
        expect(root.value).to.equal(3);
        expect(left.value).to.equal(1);
        expect(right.value).to.equal(7);
        expect(tree.size).to.equal(10);
        // delete nodes in order of increasing value
        var node = tree.find(0);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(9);
        expect(root.value).to.equal(3);
        expect(left.value).to.equal(1);
        expect(right.value).to.equal(7);
        expect(left.hasLeft).to.be.false;
        expect(left.right.value).to.equal(2);
        expect(root.balance).to.equal(1);
        expect(left.balance).to.equal(1);
        expect(right.balance).to.equal(0);
        expect(right.right.balance).to.equal(1);
        node = tree.find(1);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(8);
        expect(root.value).to.equal(7);
        expect(left.value).to.equal(3);
        expect(right.value).to.equal(8);
        expect(left.left.value).to.equal(2);
        expect(left.right.value).to.equal(5);
        expect(right.right.value).to.equal(9);
        expect(root.balance).to.equal(-1);
        expect(left.balance).to.equal(1);
        expect(right.balance).to.equal(1);
        expect(left.left.balance).to.equal(0);
        expect(left.right.balance).to.equal(0);
        expect(right.right.balance).to.equal(0);
        node = tree.find(2);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(7);
        expect(root.value).to.equal(7);
        expect(left.value).to.equal(5);
        expect(right.value).to.equal(8);
        expect(left.left.value).to.equal(3);
        expect(left.right.value).to.equal(6);
        expect(right.right.value).to.equal(9);
        expect(left.left.right.value).to.equal(4);
        expect(left.left.hasLeft).to.be.false;
        expect(root.balance).to.equal(-1);
        expect(left.balance).to.equal(-1);
        expect(right.balance).to.equal(1);
        expect(left.left.balance).to.equal(1);
        expect(left.right.balance).to.equal(0);
        expect(right.right.balance).to.equal(0);
        node = tree.find(3);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(6);
        expect(root.value).to.equal(7);
        expect(left.value).to.equal(5);
        expect(right.value).to.equal(8);
        expect(left.left.value).to.equal(4);
        expect(left.right.value).to.equal(6);
        expect(right.right.value).to.equal(9);
        expect(root.balance).to.equal(0);
        expect(left.balance).to.equal(0);
        expect(right.balance).to.equal(1);
        expect(left.left.balance).to.equal(0);
        expect(left.right.balance).to.equal(0);
        expect(right.right.balance).to.equal(0);
        node = tree.find(4);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(5);
        expect(root.value).to.equal(7);
        expect(left.value).to.equal(5);
        expect(right.value).to.equal(8);
        expect(left.hasLeft).to.be.false;
        expect(left.right.value).to.equal(6);
        expect(right.hasLeft).to.be.false;
        expect(right.right.value).to.equal(9);
        expect(root.balance).to.equal(0);
        expect(left.balance).to.equal(1);
        expect(right.balance).to.equal(1);
        expect(left.right.balance).to.equal(0);
        expect(right.right.balance).to.equal(0);
        node = tree.find(5);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(4);
        expect(root.value).to.equal(7);
        expect(left.value).to.equal(6);
        expect(right.value).to.equal(8);
        expect(left.hasLeft).to.be.false;
        expect(left.hasRight).to.be.false;
        expect(right.hasLeft).to.be.false;
        expect(right.right.value).to.equal(9);
        expect(root.balance).to.equal(1);
        expect(left.balance).to.equal(0);
        expect(right.balance).to.equal(1);
        expect(right.right.balance).to.equal(0);
        node = tree.find(6);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(3);
        expect(root.value).to.equal(8);
        expect(left.value).to.equal(7);
        expect(right.value).to.equal(9);
        expect(left.hasLeft).to.be.false;
        expect(left.hasRight).to.be.false;
        expect(right.hasLeft).to.be.false;
        expect(right.hasRight).to.be.false;
        expect(root.balance).to.equal(0);
        expect(left.balance).to.equal(0);
        expect(right.balance).to.equal(0);
        // continuing only duplicates prior 3-node tests
    });
    it('multi-node tree test #9', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        tree.fromArray([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]);
        var root = tree.root;
        var left = root.left;
        var right = root.right;
        expect(root.value).to.equal(6);
        expect(left.value).to.equal(2);
        expect(right.value).to.equal(8);
        expect(tree.size).to.equal(10);
        // remove nodes in decreasing order
        var node = tree.find(9);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(9);
        expect(root.value).to.equal(6);
        expect(left.value).to.equal(2);
        expect(right.value).to.equal(8);
        expect(right.left.value).to.equal(7);
        expect(right.hasRight).to.be.false;
        expect(root.balance).to.equal(-1);
        expect(left.balance).to.equal(0);
        expect(right.balance).to.equal(-1);
        node = tree.find(8);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(8);
        expect(root.value).to.equal(2);
        expect(left.value).to.equal(1);
        expect(right.value).to.equal(6);
        expect(left.left.value).to.equal(0);
        expect(right.left.value).to.equal(4);
        expect(right.right.value).to.equal(7);
        expect(right.left.left.value).to.equal(3);
        expect(right.left.right.value).to.equal(5);
        expect(right.right.hasLeft).to.be.false;
        expect(right.right.hasRight).to.be.false;
        expect(root.balance).to.equal(1);
        expect(left.balance).to.equal(-1);
        expect(right.balance).to.equal(-1);
        expect(right.left.balance).to.equal(0);
        node = tree.find(7);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(7);
        expect(root.value).to.equal(2);
        expect(left.value).to.equal(1);
        expect(right.value).to.equal(4);
        expect(right.left.value).to.equal(3);
        expect(right.right.value).to.equal(6);
        expect(right.right.hasLeft).to.be.true;
        expect(right.right.hasRight).to.be.false;
        expect(right.right.left.value).to.equal(5);
        expect(root.balance).to.equal(1);
        expect(left.balance).to.equal(-1);
        expect(right.balance).to.equal(1);
        expect(right.left.balance).to.equal(0);
        expect(right.right.balance).to.equal(-1);
        expect(right.right.left.balance).to.equal(0);
        node = tree.find(6);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(6);
        expect(root.value).to.equal(2);
        expect(left.value).to.equal(1);
        expect(right.value).to.equal(4);
        expect(right.left.value).to.equal(3);
        expect(right.right.value).to.equal(5);
        expect(right.right.hasLeft).to.be.false;
        expect(right.right.hasRight).to.be.false;
        expect(root.balance).to.equal(0);
        expect(left.balance).to.equal(-1);
        expect(right.balance).to.equal(0);
        node = tree.find(5);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(5);
        expect(root.value).to.equal(2);
        expect(left.value).to.equal(1);
        expect(right.value).to.equal(4);
        expect(right.left.value).to.equal(3);
        expect(right.hasRight).to.be.false;
        expect(root.balance).to.equal(0);
        expect(left.balance).to.equal(-1);
        expect(right.balance).to.equal(-1);
        node = tree.find(4);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(4);
        expect(root.value).to.equal(2);
        expect(left.value).to.equal(1);
        expect(right.value).to.equal(3);
        expect(left.value).to.equal(1);
        expect(right.hasLeft).to.be.false;
        expect(right.hasRight).to.be.false;
        node = tree.find(3);
        tree.delete(node);
        root = tree.root;
        left = root.left;
        right = root.right;
        expect(tree.size).to.equal(3);
        expect(root.value).to.equal(1);
        expect(left.value).to.equal(0);
        expect(right.value).to.equal(2);
        expect(left.hasLeft).to.be.false;
        expect(left.hasRight).to.be.false;
        expect(right.hasLeft).to.be.false;
        expect(right.hasRight).to.be.false;
        // remainder of process duplicates prior 3-node tests
    });
    it('delete by value test', function () {
        var tree = new AVLTree_1.TSMT$AVLTree();
        tree.fromArray([10, 8, 18, 17, 20, 24, 15]);
        var node = tree.find(10);
        expect(node.id).to.equal("0");
        expect(node.value).to.equal(10);
        tree.deleteByValue(10);
        tree.deleteByValue(20);
        var root = tree.root;
        var left = root.left;
        var right = root.right;
        expect(tree.size).to.equal(5);
        expect(root.value).to.equal(18);
        expect(left.value).to.equal(15);
        expect(right.value).to.equal(24);
        expect(left.left.value).to.equal(8);
        expect(left.right.value).to.equal(17);
        expect(root.balance).to.equal(-1);
        expect(left.balance).to.equal(0);
        expect(right.balance).to.equal(0);
    });
});
